// built from the ./server/dist/index.html file during npm run build
const builtinWorker = atob(`<a href="https://workerbox.net">info?</a>.

<script>
  function workerScript () {
(()=>{var generateUniqueId_default=()=>(globalThis.incrementor=(globalThis.incrementor||0)+1,globalThis.incrementor+"_"+Array(20).fill("!@#$%^&*()_+-=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz").map((function(e){return e[Math.floor(Math.random()*e.length)]})).join(""));var e=function createCallbackStore(){const e={};return{store:e,add:t=>{const r=generateUniqueId_default();return e[r]=t,r},get:t=>e[t]}},t=class{constructor(){this.keyToValue=new Map,this.valueToKey=new Map}set(e,t){this.keyToValue.set(e,t),this.valueToKey.set(t,e)}getByKey(e){return this.keyToValue.get(e)}getByValue(e){return this.valueToKey.get(e)}clear(){this.keyToValue.clear(),this.valueToKey.clear()}},r=class{constructor(e){this.generateIdentifier=e,this.kv=new t}register(e,t){this.kv.getByValue(e)||(t||(t=this.generateIdentifier(e)),this.kv.set(t,e))}clear(){this.kv.clear()}getIdentifier(e){return this.kv.getByValue(e)}getValue(e){return this.kv.getByKey(e)}},n=class extends r{constructor(){super((e=>e.name)),this.classToAllowedProps=new Map}register(e,t){"object"==typeof t?(t.allowProps&&this.classToAllowedProps.set(e,t.allowProps),super.register(e,t.identifier)):super.register(e,t)}getAllowedProps(e){return this.classToAllowedProps.get(e)}};function find(e,t){const r=function valuesOfObj(e){if("values"in Object)return Object.values(e);const t=[];for(const r in e)e.hasOwnProperty(r)&&t.push(e[r]);return t}(e);if("find"in r)return r.find(t);const n=r;for(let e=0;e<n.length;e++){const r=n[e];if(t(r))return r}}function forEach(e,t){Object.entries(e).forEach((([e,r])=>t(r,e)))}function includes(e,t){return-1!==e.indexOf(t)}function findArr(e,t){for(let r=0;r<e.length;r++){const n=e[r];if(t(n))return n}}var s=class{constructor(){this.transfomers={}}register(e){this.transfomers[e.name]=e}findApplicable(e){return find(this.transfomers,(t=>t.isApplicable(e)))}findByName(e){return this.transfomers[e]}},isUndefined=e=>void 0===e,isPlainObject=e=>"object"==typeof e&&null!==e&&(e!==Object.prototype&&(null===Object.getPrototypeOf(e)||Object.getPrototypeOf(e)===Object.prototype)),isEmptyObject=e=>isPlainObject(e)&&0===Object.keys(e).length,isArray=e=>Array.isArray(e),isMap=e=>e instanceof Map,isSet=e=>e instanceof Set,isSymbol=e=>"Symbol"===(e=>Object.prototype.toString.call(e).slice(8,-1))(e),isNaNValue=e=>"number"==typeof e&&isNaN(e),isPrimitive=e=>(e=>"boolean"==typeof e)(e)||(e=>null===e)(e)||isUndefined(e)||(e=>"number"==typeof e&&!isNaN(e))(e)||(e=>"string"==typeof e)(e)||isSymbol(e),escapeKey=e=>e.replace(/\./g,"\\."),stringifyPath=e=>e.map(String).map(escapeKey).join("."),parsePath=e=>{const t=[];let r="";for(let n=0;n<e.length;n++){let s=e.charAt(n);if("\\"===s&&"."===e.charAt(n+1)){r+=".",n++;continue}"."===s?(t.push(r),r=""):r+=s}const n=r;return t.push(n),t};function simpleTransformation(e,t,r,n){return{isApplicable:e,annotation:t,transform:r,untransform:n}}var a=[simpleTransformation(isUndefined,"undefined",(()=>null),(()=>{})),simpleTransformation((e=>"bigint"==typeof e),"bigint",(e=>e.toString()),(e=>"undefined"!=typeof BigInt?BigInt(e):(console.error("Please add a BigInt polyfill."),e))),simpleTransformation((e=>e instanceof Date&&!isNaN(e.valueOf())),"Date",(e=>e.toISOString()),(e=>new Date(e))),simpleTransformation((e=>e instanceof Error),"Error",((e,t)=>{const r={name:e.name,message:e.message};return t.allowedErrorProps.forEach((t=>{r[t]=e[t]})),r}),((e,t)=>{const r=new Error(e.message);return r.name=e.name,r.stack=e.stack,t.allowedErrorProps.forEach((t=>{r[t]=e[t]})),r})),simpleTransformation((e=>e instanceof RegExp),"regexp",(e=>""+e),(e=>{const t=e.slice(1,e.lastIndexOf("/")),r=e.slice(e.lastIndexOf("/")+1);return new RegExp(t,r)})),simpleTransformation(isSet,"set",(e=>[...e.values()]),(e=>new Set(e))),simpleTransformation(isMap,"map",(e=>[...e.entries()]),(e=>new Map(e))),simpleTransformation((e=>{return isNaNValue(e)||((t=e)===1/0||t===-1/0);var t}),"number",(e=>isNaNValue(e)?"NaN":e>0?"Infinity":"-Infinity"),Number),simpleTransformation((e=>0===e&&1/e==-1/0),"number",(()=>"-0"),Number),simpleTransformation((e=>e instanceof URL),"URL",(e=>e.toString()),(e=>new URL(e)))];function compositeTransformation(e,t,r,n){return{isApplicable:e,annotation:t,transform:r,untransform:n}}var o=compositeTransformation(((e,t)=>{if(isSymbol(e)){return!!t.symbolRegistry.getIdentifier(e)}return!1}),((e,t)=>["symbol",t.symbolRegistry.getIdentifier(e)]),(e=>e.description),((e,t,r)=>{const n=r.symbolRegistry.getValue(t[1]);if(!n)throw new Error("Trying to deserialize unknown symbol");return n})),i=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,Uint8ClampedArray].reduce(((e,t)=>(e[t.name]=t,e)),{}),l=compositeTransformation((e=>ArrayBuffer.isView(e)&&!(e instanceof DataView)),(e=>["typed-array",e.constructor.name]),(e=>[...e]),((e,t)=>{const r=i[t[1]];if(!r)throw new Error("Trying to deserialize unknown typed array");return new r(e)}));function isInstanceOfRegisteredClass(e,t){if(e?.constructor){return!!t.classRegistry.getIdentifier(e.constructor)}return!1}var c=compositeTransformation(isInstanceOfRegisteredClass,((e,t)=>["class",t.classRegistry.getIdentifier(e.constructor)]),((e,t)=>{const r=t.classRegistry.getAllowedProps(e.constructor);if(!r)return{...e};const n={};return r.forEach((t=>{n[t]=e[t]})),n}),((e,t,r)=>{const n=r.classRegistry.getValue(t[1]);if(!n)throw new Error("Trying to deserialize unknown class - check https://github.com/blitz-js/superjson/issues/116#issuecomment-773996564");return Object.assign(Object.create(n.prototype),e)})),u=compositeTransformation(((e,t)=>!!t.customTransformerRegistry.findApplicable(e)),((e,t)=>["custom",t.customTransformerRegistry.findApplicable(e).name]),((e,t)=>t.customTransformerRegistry.findApplicable(e).serialize(e)),((e,t,r)=>{const n=r.customTransformerRegistry.findByName(t[1]);if(!n)throw new Error("Trying to deserialize unknown custom value");return n.deserialize(e)})),f=[c,o,u,l],transformValue=(e,t)=>{const r=findArr(f,(r=>r.isApplicable(e,t)));if(r)return{value:r.transform(e,t),type:r.annotation(e,t)};const n=findArr(a,(r=>r.isApplicable(e,t)));return n?{value:n.transform(e,t),type:n.annotation}:void 0},p={};a.forEach((e=>{p[e.annotation]=e}));var getNthKey=(e,t)=>{const r=e.keys();for(;t>0;)r.next(),t--;return r.next().value};function validatePath(e){if(includes(e,"__proto__"))throw new Error("__proto__ is not allowed as a property");if(includes(e,"prototype"))throw new Error("prototype is not allowed as a property");if(includes(e,"constructor"))throw new Error("constructor is not allowed as a property")}var setDeep=(e,t,r)=>{if(validatePath(t),0===t.length)return r(e);let n=e;for(let e=0;e<t.length-1;e++){const r=t[e];if(isArray(n)){n=n[+r]}else if(isPlainObject(n))n=n[r];else if(isSet(n)){n=getNthKey(n,+r)}else if(isMap(n)){if(e===t.length-2)break;const s=+r,a=0==+t[++e]?"key":"value",o=getNthKey(n,s);switch(a){case"key":n=o;break;case"value":n=n.get(o)}}}const s=t[t.length-1];if(isArray(n)?n[+s]=r(n[+s]):isPlainObject(n)&&(n[s]=r(n[s])),isSet(n)){const e=getNthKey(n,+s),t=r(e);e!==t&&(n.delete(e),n.add(t))}if(isMap(n)){const e=+t[t.length-2],a=getNthKey(n,e);switch(0==+s?"key":"value"){case"key":{const e=r(a);n.set(e,n.get(a)),e!==a&&n.delete(a);break}case"value":n.set(a,r(n.get(a)))}}return e};function traverse(e,t,r=[]){if(!e)return;if(!isArray(e))return void forEach(e,((e,n)=>traverse(e,t,[...r,...parsePath(n)])));const[n,s]=e;s&&forEach(s,((e,n)=>{traverse(e,t,[...r,...parsePath(n)])})),t(n,r)}function applyValueAnnotations(e,t,r){return traverse(t,((t,n)=>{e=setDeep(e,n,(e=>((e,t,r)=>{if(!isArray(t)){const n=p[t];if(!n)throw new Error("Unknown transformation: "+t);return n.untransform(e,r)}switch(t[0]){case"symbol":return o.untransform(e,t,r);case"class":return c.untransform(e,t,r);case"custom":return u.untransform(e,t,r);case"typed-array":return l.untransform(e,t,r);default:throw new Error("Unknown transformation: "+t)}})(e,t,r)))})),e}function applyReferentialEqualityAnnotations(e,t){function apply(t,r){const n=((e,t)=>{validatePath(t);for(let r=0;r<t.length;r++){const n=t[r];if(isSet(e))e=getNthKey(e,+n);else if(isMap(e)){const s=+n,a=0==+t[++r]?"key":"value",o=getNthKey(e,s);switch(a){case"key":e=o;break;case"value":e=e.get(o)}}else e=e[n]}return e})(e,parsePath(r));t.map(parsePath).forEach((t=>{e=setDeep(e,t,(()=>n))}))}if(isArray(t)){const[r,n]=t;r.forEach((t=>{e=setDeep(e,parsePath(t),(()=>e))})),n&&forEach(n,apply)}else forEach(t,apply);return e}var walker=(e,t,r,n,s=[],a=[],o=new Map)=>{const i=isPrimitive(e);if(!i){!function addIdentity(e,t,r){const n=r.get(e);n?n.push(t):r.set(e,[t])}(e,s,t);const r=o.get(e);if(r)return n?{transformedValue:null}:r}if(!((e,t)=>isPlainObject(e)||isArray(e)||isMap(e)||isSet(e)||isInstanceOfRegisteredClass(e,t))(e,r)){const t=transformValue(e,r),n=t?{transformedValue:t.value,annotations:[t.type]}:{transformedValue:e};return i||o.set(e,n),n}if(includes(a,e))return{transformedValue:null};const l=transformValue(e,r),c=l?.value??e,u=isArray(c)?[]:{},f={};forEach(c,((i,l)=>{if("__proto__"===l||"constructor"===l||"prototype"===l)throw new Error(`Detected property ${l}. This is a prototype pollution risk, please remove it from your object.`);const c=walker(i,t,r,n,[...s,l],[...a,e],o);u[l]=c.transformedValue,isArray(c.annotations)?f[l]=c.annotations:isPlainObject(c.annotations)&&forEach(c.annotations,((e,t)=>{f[escapeKey(l)+"."+t]=e}))}));const p=isEmptyObject(f)?{transformedValue:u,annotations:l?[l.type]:void 0}:{transformedValue:u,annotations:l?[l.type,f]:f};return i||o.set(e,p),p};function getType2(e){return Object.prototype.toString.call(e).slice(8,-1)}function isArray2(e){return"Array"===getType2(e)}(function isOneOf(e,t,r,n,s){return a=>e(a)||t(a)||!!r&&r(a)||!!n&&n(a)||!!s&&s(a)})((function isNull2(e){return"Null"===getType2(e)}),(function isUndefined2(e){return"Undefined"===getType2(e)}));function copy(e,t={}){if(isArray2(e))return e.map((e=>copy(e,t)));if(!function isPlainObject2(e){if("Object"!==getType2(e))return!1;const t=Object.getPrototypeOf(e);return!!t&&t.constructor===Object&&t===Object.prototype}(e))return e;return[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)].reduce(((r,n)=>{if(isArray2(t.props)&&!t.props.includes(n))return r;return function assignProp(e,t,r,n,s){const a={}.propertyIsEnumerable.call(n,t)?"enumerable":"nonenumerable";"enumerable"===a&&(e[t]=r),s&&"nonenumerable"===a&&Object.defineProperty(e,t,{value:r,enumerable:!1,writable:!0,configurable:!0})}(r,n,copy(e[n],t),e,t.nonenumerable),r}),{})}var y=class{constructor({dedupe:e=!1}={}){this.classRegistry=new n,this.symbolRegistry=new r((e=>e.description??"")),this.customTransformerRegistry=new s,this.allowedErrorProps=[],this.dedupe=e}serialize(e){const t=new Map,r=walker(e,t,this,this.dedupe),n={json:r.transformedValue};r.annotations&&(n.meta={...n.meta,values:r.annotations});const s=function generateReferentialEqualityAnnotations(e,t){const r={};let n;return e.forEach((e=>{if(e.length<=1)return;t||(e=e.map((e=>e.map(String))).sort(((e,t)=>e.length-t.length)));const[s,...a]=e;0===s.length?n=a.map(stringifyPath):r[stringifyPath(s)]=a.map(stringifyPath)})),n?isEmptyObject(r)?[n]:[n,r]:isEmptyObject(r)?void 0:r}(t,this.dedupe);return s&&(n.meta={...n.meta,referentialEqualities:s}),n}deserialize(e){const{json:t,meta:r}=e;let n=copy(t);return r?.values&&(n=applyValueAnnotations(n,r.values,this)),r?.referentialEqualities&&(n=applyReferentialEqualityAnnotations(n,r.referentialEqualities)),n}stringify(e){return JSON.stringify(this.serialize(e))}parse(e){return this.deserialize(JSON.parse(e))}registerClass(e,t){this.classRegistry.register(e,t)}registerSymbol(e,t){this.symbolRegistry.register(e,t)}registerCustom(e,t){this.customTransformerRegistry.register({name:t,...e})}allowErrorProps(...e){this.allowedErrorProps.push(...e)}};y.defaultInstance=new y,y.serialize=y.defaultInstance.serialize.bind(y.defaultInstance),y.deserialize=y.defaultInstance.deserialize.bind(y.defaultInstance),y.stringify=y.defaultInstance.stringify.bind(y.defaultInstance),y.parse=y.defaultInstance.parse.bind(y.defaultInstance),y.registerClass=y.defaultInstance.registerClass.bind(y.defaultInstance),y.registerSymbol=y.defaultInstance.registerSymbol.bind(y.defaultInstance),y.registerCustom=y.defaultInstance.registerCustom.bind(y.defaultInstance),y.allowErrorProps=y.defaultInstance.allowErrorProps.bind(y.defaultInstance);y.serialize,y.deserialize,y.stringify,y.parse,y.registerClass,y.registerCustom,y.registerSymbol,y.allowErrorProps;var d=function createSuperJSON(e,t){const r=new y;return r.registerCustom({isApplicable:e=>"function"==typeof e,serialize:e,deserialize:e=>(...n)=>t(e,r.stringify(n))},"callback"),r};var getStack=(e,t)=>{const r=e.stack.split("\n");return[r[0],...r.filter((e=>e.includes("(eval at scopedEval"))).map((e=>{const t=e.split("(eval at scopedEval ("),[,r]=e.split("<anonymous>"),[,n,s]=r.slice(0,-1).split(":");return`${t[0]}(<sandbox>:${n-3}:${s})`}))].slice(0,t).join("\n")};self.addEventListener("message",(async t=>{const r=t.ports[0],n=e(),s=d(n.add,((e,t)=>new Promise((s=>{r.postMessage(["callback",{id:e,args:t,resolve:n.add(s)}])}))));r.onmessage=async e=>{const[t,a]=e.data,{id:o,errorId:i,code:l,scope:c,args:u,resolve:f,reject:p}=a;if("execute"===t){const e=s.parse(c);try{const t=await async function scopedEval(e,t){return Function.apply(null,[...Object.keys(e),`return (async function sandbox () {${t} })()`]).apply(null,[...Object.values(e)])}(e,l);r.postMessage(["return",{id:o,args:s.stringify([t])}])}catch(e){try{const t=getStack(e,-1);r.postMessage(["error",{id:i,args:s.stringify([t||e.message])}])}catch(t){r.postMessage(["error",{id:i,args:s.stringify([e.message])}])}}}if("callback"===t){const e=s.parse(u),t=n.get(o);if(!t)return;try{const n=await t(...e);r.postMessage(["return",{id:f,args:s.stringify([n])}])}catch(e){const t=getStack(e);r.postMessage(["error",{id:p,args:s.stringify([t||e.message])}])}}}}))})();
  }

  self.addEventListener('message', async (event) => {
    const code = workerScript.toString().split('\n').slice(1, -1).join('\n');
    const blob = new Blob([code], {type: 'application/javascript'})
    const worker = new Worker(URL.createObjectURL(blob))

    worker.postMessage('OK', event.ports);
  });
</script>
`); export default builtinWorker;